package z7z8.statistics;

/*****
 * 
 * @author cash
 * @date 2018年6月5日 下午4:38:57
 * @decription 统计一堆int 的 二进制中的1个数
 */
public class Statistics {

	// 空间换时间,统计保存了0~255的1的个数
	static int[] bits_in_char = { 0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3,
			4, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 1, 2, 2, 3, 2,
			3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4,
			5, 4, 5, 5, 6, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2,
			3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4,
			5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5,
			6, 6, 7, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3,
			4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3,
			4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6,
			7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4,
			5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5,
			6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8 };
	
	
	static int bitcount(int n){//统计int 的 二进制中1的个数

		// works only for 32-bit ints
		return bits_in_char[n & 0xff] + bits_in_char[(n >> 8) & 0xff]
				+ bits_in_char[(n >> 16) & 0xff]
				+ bits_in_char[(n >> 24) & 0xff];

	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] arr={1000,23423,45346,475674,7843899,232132,42556,5876678,123423,78970890,457465789,2341341,5347658,
				1000,23423,45346,475674,7843899,232132,42556,5876678,123423,78970890,457465789,2341341,5347658,
				1000,23423,45346,475674,7843899,232132,42556,5876678,123423,78970890,457465789,2341341,5347658,
				1000,23423,45346,475674,7843899,232132,42556,5876678,123423,78970890,457465789,2341341,5347658,
				1000,23423,45346,475674,7843899,232132,42556,5876678,123423,78970890,457465789,2341341,5347658,
				1000,23423,45346,475674,7843899,232132,42556,5876678,123423,78970890,457465789,2341341,5347658,
				1000,23423,45346,475674,7843899,232132,42556,5876678,123423,78970890,457465789,2341341,5347658,
				1000,23423,45346,475674,7843899,232132,42556,5876678,123423,78970890,457465789,2341341,5347658,
				1000,23423,45346,475674,7843899,232132,42556,5876678,123423,78970890,457465789,2341341,5347658,
				1000,23423,45346,475674,7843899,232132,42556,5876678,123423,78970890,457465789,2341341,5347658,
				1000,23423,45346,475674,7843899,232132,42556,5876678,123423,78970890,457465789,2341341,5347658,
				1000,23423,45346,475674,7843899,232132,42556,5876678,123423,78970890,457465789,2341341,5347658,
				1000,23423,45346,475674,7843899,232132,42556,5876678,123423,78970890,457465789,2341341,5347658,
				1000,23423,45346,475674,7843899,232132,42556,5876678,123423,78970890,457465789,2341341,5347658,
				1000,23423,45346,475674,7843899,232132,42556,5876678,123423,78970890,457465789,2341341,5347658,
				1000,23423,45346,475674,7843899,232132,42556,5876678,123423,78970890,457465789,2341341,5347658,
				1000,23423,45346,475674,7843899,232132,42556,5876678,123423,78970890,457465789,2341341,5347658,
				1000,23423,45346,475674,7843899,232132,42556,5876678,123423,78970890,457465789,2341341,5347658,
				1000,23423,45346,475674,7843899,232132,42556,5876678,123423,78970890,457465789,2341341,5347658,
				1000,23423,45346,475674,7843899,232132,42556,5876678,123423,78970890,457465789,2341341,5347658,
				1000,23423,45346,475674,7843899,232132,42556,5876678,123423,78970890,457465789,2341341,5347658,
				1000,23423,45346,475674,7843899,232132,42556,5876678,123423,78970890,457465789,2341341,5347658,
				1000,23423,45346,475674,7843899,232132,42556,5876678,123423,78970890,457465789,2341341,5347658,
				1000,23423,45346,475674,7843899,232132,42556,5876678,123423,78970890,457465789,2341341,5347658,
				1000,23423,45346,475674,7843899,232132,42556,5876678,123423,78970890,457465789,2341341,5347658,
				1000,23423,45346,475674,7843899,232132,42556,5876678,123423,78970890,457465789,2341341,5347658,
				1000,23423,45346,475674,7843899,232132,42556,5876678,123423,78970890,457465789,2341341,5347658,
				1000,23423,45346,475674,7843899,232132,42556,5876678,123423,78970890,457465789,2341341,5347658,
				1000,23423,45346,475674,7843899,232132,42556,5876678,123423,78970890,457465789,2341341,5347658,
				1000,23423,45346,475674,7843899,232132,42556,5876678,123423,78970890,457465789,2341341,5347658,
				1000,23423,45346,475674,7843899,232132,42556,5876678,123423,78970890,457465789,2341341,5347658,
				1000,23423,45346,475674,7843899,232132,42556,5876678,123423,78970890,457465789,2341341,5347658,
				1000,23423,45346,475674,7843899,232132,42556,5876678,123423,78970890,457465789,2341341,5347658,
				1000,23423,45346,475674,7843899,232132,42556,5876678,123423,78970890,457465789,2341341,5347658,
				1000,23423,45346,475674,7843899,232132,42556,5876678,123423,78970890,457465789,2341341,5347658,
				1000,23423,45346,475674,7843899,232132,42556,5876678,123423,78970890,457465789,2341341,5347658,
				1000,23423,45346,475674,7843899,232132,42556,5876678,123423,78970890,457465789,2341341,5347658,
				1000,23423,45346,475674,7843899,232132,42556,5876678,123423,78970890,457465789,2341341,5347658,
				1000,23423,45346,475674,7843899,232132,42556,5876678,123423,78970890,457465789,2341341,5347658,
				1000,23423,45346,475674,7843899,232132,42556,5876678,123423,78970890,457465789,2341341,5347658,
				1000,23423,45346,475674,7843899,232132,42556,5876678,123423,78970890,457465789,2341341,5347658};
		//1.空间换时间
		long start=System.currentTimeMillis();
		int count=0;
		for(int n:arr){
			count+=bitcount(n);
		}
		long end1=System.currentTimeMillis();
		System.out.println(count+" 耗时："+(end1-start));
		
		
		// x=x&(x-1)
		int count2=0;
		for(int n:arr){
			count2+=GetNumOfOne(n);
		}
		long end2=System.currentTimeMillis();
		System.out.println(count2+" 耗时："+(end2-end1));
		
	}
	
	static int GetNumOfOne(int x)
	{
	    int count = 0;
	    while (x!=0)//x=x&(x-1),每次都能去掉最右的1,循环次数就是1的个数
	    {
	        count++;
	        x = x & (x - 1);
	    }
	    return count;
	}

	

}
